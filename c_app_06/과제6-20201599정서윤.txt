// √1 + √ 2 + … + √n 을 계산하시오.(라이브러리 함수 sqrt()이용)
#include <stdio.h>
#include <math.h>

void main1()
{
	int n, i;
	double sum = 0.0;

	printf("n값을 입력하세요 : \n");
	scanf_s("%d", &n);

	for (i = 1; i <= n; i++)
	{
		sum = sum + sqrt((double)i);
	}
	printf("결과 값은 : %.3lf", sum);
}

// a(정수)의 b(자연수)승을 해 주는 함수를 직접 만들고, 호출해 보시오.
#include <stdio.h>
#include <math.h>
int mypow(int a, int b);
void main2()
{
	int x, y, res;
	printf("정수 2개를 입력하세요. : ");
	scanf_s("%d %d", &x, &y);

	res = mypow(x, y);
	printf("결과는 : %d", res);
}
int mypow(int a, int b)
{
	int i, mul = 1;
	
	for (i = 1; i <= b; i++)
	{
		mul = mul * a;
	}
	return mul;
}

// 입력된 3수 중 가장 큰 값과 가장 작은 값을 구하시오.
// (큰 값 구해서 리턴하는 함수와, 
// 작은 값 구해서 리턴하는 함수를 각각 구현)
#include <stdio.h>
int top(a, b, c);
int row(a, b, c);
void main3()
{
	int x, y, z;
	int top1, row1; 
	printf("수 3개를 입력하세요 : ");
	scanf_s("%d %d %d", &x, &y, &z);

	top1 =  top(x, y, z);
	row1 = row(x, y, z);
	printf("가장 큰 수는 : %d\n가장 작은 수는 : %d", top1, row1);
}
int top(a, b, c)
{
	if (a >= b && a >= c) return a;
	else if (b >= a && b >= c) return b;
	else return c;
}
int row(a, b, c)
{
	if (a <= b && a <= c) return a;
	else if (b <= a && b <= c) return b;
	else return c;
}

// 입력된 수의 1.1승, 2.2승, 3.3승, …, 9.9승을 출력하시오
// (라이브러리 함수 pow() 사용)
#include <stdio.h>
#include <math.h>
void main4()
{
	int n, i;
	printf("정수를 입력하세요 : ");
	scanf_s("%d", &n);

	for (i = 10; i <= 50; i += 10)
	{
		printf("2의 %d승은 : %.0lf\n", i, pow((double)n, (double)i));
	}
}

// 배열을 인자로 받아 최대값을 가진 원소를 리턴 해주는 함수를 만들고, 
// 이 함수를 이용하여 배열에 입력된 여러 수 중 최대값을 출력하시오.
#include <stdio.h>
int max(int a[], int s);

void main5()
{
	int brr[5] = { 3, 6, 10, 239, 51 };
	int top;

	top = max(brr, 5);
	printf("가장 큰 값은 : %d", top);
}

int max(int arr[], int s)
{
	int i, top;
	
	top = arr[0];
	for (i = 1; i < s; i++)
	{
		if (arr[i] > top)
		{
			top = arr[i];
		}
	}
	return top;
}

// 배열의 각 원소값을 거꾸로 바꿔주는 함수를 만들고, 호출해 보시오.
// ({ 1,4,7,5 } -> {5, 7, 4, 1} 예:void rev_arr(int aa[], int sz))

#include <stdio.h>

void rev_arr(int arr[], int sz);

void main6()
{
    int brr[] = { 1, 4, 7, 5 };
    int sz = sizeof(brr) / sizeof(brr[0]);

    printf("원래의 값 : ");
    for (int i = 0; i < sz; i++) {
        printf("%d ", brr[i]);
    }
    printf("\n");

    rev_arr(brr, sz);

    printf("바뀐 값 : ");
    for (int i = 0; i < sz; i++) {
        printf("%d ", brr[i]);
    }
    printf("\n");

}

void rev_arr(int arr[], int sz)
{
    int temp;
    for (int i = 0; i < sz / 2; i++) {
        temp = arr[i];
        arr[i] = arr[sz - i - 1];
        arr[sz - i - 1] = temp;
    }
}

// 난수를 이용하여 1에서 45 사이의 서로 다른 숫자 6개를 발생시켜 출력하시오.
// (중복제거하고, 라이브러리 rand(), srand(), time() 사용)
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void main7() {
    srand(time(NULL)); // 난수 초기화

    int arr[6];
    int count = 0;

    while (count < 6) {
        int value = (rand() % 45) + 1;
        int isDuplicate = 0;

        // 이전에 생성된 값들과 중복을 확인
        for (int i = 0; i < count; i++) {
            if (arr[i] == value) {
                isDuplicate = 1;
                break;
            }
        }

        // 중복이 아니면 배열에 추가
        if (!isDuplicate) { // 값이 0일 때 실행
            arr[count] = value;
            count++;
        }
    }

    // 생성된 고유한 난수 출력
    for (int i = 0; i < 6; i++) {
        printf("%d ", arr[i]);
    }
}

// 20억 이상의 소수(prime number) 10개 찾기.
// (소수인지 알려주는 함수를 구현할 것 예 : int is_prime(int))
#include <stdio.h>

int is_prime(long long int n);

void main8() {
    long long int pn = 2000000000LL;
    int count = 0;

    while (count < 10) {
        if (is_prime(pn)) {
            printf("20억 이상의 소수: %lld\n", pn);
            count++;
        }
        pn++;
    }
}

int is_prime(long long int n) {
    if (n <= 1) {
        return 0; // 소수가 아님
    }
    for (long long int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            return 0; // 소수가 아님
        }
    }
    return 1; // 소수임
}

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// 중복되지 않는 6자리 난수 생성 함수
void generate_unique_random(int arr[]) {
    int temp[45] = { 0 }; // 중복 확인을 위한 배열
    int num_generated = 0; // 생성된 난수의 개수

    while (num_generated < 6) {
        int rand_num = rand() % 45 + 1; // 1부터 45까지의 난수 생성

        // 중복 확인
        if (temp[rand_num - 1] == 0) {
            arr[num_generated] = rand_num;
            temp[rand_num - 1] = 1; // 중복 체크를 위해 해당 인덱스를 1로 설정
            num_generated++;
        }
    }
}

// 로또 번호를 생성하고 당첨 여부를 판단하는 함수
int check_lotto_winner(int target_lotto[]) {
    int count = 0;
    int total_sets = 1000000000;

    for (int i = 0; i < total_sets; i++) {
        int lotto[6];
        // 로또 번호 생성
        generate_unique_random(lotto);

        // 당첨 여부 확인
        int match_count = 0;
        for (int j = 0; j < 6; j++) {
            for (int k = 0; k < 6; k++) {
                if (target_lotto[j] == lotto[k]) {
                    match_count++;
                    break;
                }
            }
        }
        if (match_count == 6) { // 1등 당첨 시
            count++;
        }
    }

    printf("1등 당첨 확률: %.15f%%\n", (double)count / total_sets * 100);
    return count;
}

void main9() {
    srand(time(NULL)); // 난수 초기화

    int target_lotto[6] = { 1, 2, 3, 4, 5, 6 }; // 1등 번호
    int count = check_lotto_winner(target_lotto);

    printf("총 당첨 세트 수: %d\n", count);
}

#include <stdio.h>
#include <string.h>
#pragma warning(disable:4996)
void my_Strcat(char*, char*);
void main10()
{
	char str1[20] = "Manny";
	char str2[20] = " machado";

	printf("첫번 째 문자열 : %s, 두번째 문자열 : %s\n", str1, str2);

	my_Strcat(str1, str2);

	printf("두번 째 문자열: %s, 합친 문자열 : %s\n", str2, str1); //함수 호출 후
	return 0;
}
void my_Strcat(char* D, char* S)
{
	strcat(D, S);
}